[INCLUDE=presentation]
Title         : Python i roboty(ka)
Sub Title     : 
Author        : Marek Gawryszewski
Affiliation   : 
Email         : marek.gawryszewski@outlook.com
Reveal Theme  : simple
Beamer Theme  : singapore

[TITLE]

#O mnie

- programista w Harman 
- doktorant w Instytucie Automatyki PŁ



<!--![Harman]
![hrp1v0bb] -->

[Harman]: images/Harman.jpg "Harman" { width:auto; max-width:40% }

[hrp1v0bb]: images/hrp1v0bb.jpeg "hrp1v0bb" { width:auto; max-width:40% }

#O czym opowiem?
* Jak zbudować własnego robota?
* Gdzie w tym jest miejsce dla Pythona?
* Jak to działa?



#Jak zbudować robota?

Dwa zasadnicze elementy: sprzęt i oprogramowanie.

#Hardware
* Chasis
* Czujniki
* napęd (elementy wykonawcze)
* elektronika

#Software
* W zależności od platformy sprzętowej
  * bare metal
  * RTOS (FreeRTOS, ...)
  * Linux
* narzędzia, drivery, aplikacje
  * protokoły komunikacyjne (SPI, I2C, UART) , urządzenia (kamery, czujniki)
  * aplikacja sterująca

# Aplikacja
* HAL
* sterowanie
* logika

# Robotycy cierpią na wymyślanie koła od nowa

Typowe zadania, realizowane w większyości (każdym?) projekcie:

* komunikacja między modułami aplikacji
* obsługa sprzętu
* logowanie i debugowanie
* implementacja uniwersalnych algorytmów
* rozpoznawanie wzorca
* tworzenie mapy
* typowe algorytmy sterowania
* wewnętrzna komunikacja (protokół)
* obsługa kontrolerów (joystick, klawiatura)
* nawigacja
* system wizyjny

# Biblioteki 
* ROS

ROS (Robot Operating System) provides libraries and tools to help software developers create robot applications. It provides hardware abstraction, device drivers, libraries, visualizers, message-passing, package management, and more. 

* OpenCV

  Widzenie maszynowe: rozpoznawanie wzorców,  
  
* ...

# ROS
![rosLarge]

[rosLarge]: images/rosLarge.png "rosLarge" { width:auto; max-width:60% }

[ROS] is an open-source, meta-operating system for your robot. It provides the services you would expect from an operating system, including hardware abstraction, low-level device control, implementation of commonly-used functionality, message-passing between processes, and package management. It also provides tools and libraries for obtaining, building, writing, and running code across multiple computers.

[ROS]: http://www.ros.org

#ROS
ROS provides standard operating system services such as:
* hardware abstraction, (USB drive)
*low-level device control, 
*implementation of commonly-used functionality,
*message-passing between processes, and 
*package management
*provides tools and libraries for obtaining, building, writing, and running code across multiple computers


#ROS
* **node**

  Nodes are processes that perform computation.

* **topic**

  Messages are routed via a transport system with publish / subscribe semantics.

* **package **

  Packages are the main unit for organizing software in ROS

* **message**

  Message descriptions, stored in my_package/msg/MyMessageType.msg, define the data structures for messages sent in ROS. 

* **service**

  Service descriptions, stored in my_package/srv/MyServiceType.srv, define the request and response data structures for services in ROS. 

#OpenCV
![OpenCV_Logo.svg]
docs.opencv.org: OpenCV (Open Source Computer Vision Library: http://opencv.org) is an open-source BSD-licensed library that includes several hundreds of computer vision algorithms.
[OpenCV_Logo.svg]: images/2000px-OpenCV_Logo_with_text_svg_version.svg.png "2000px-OpenCV_Logo_with_text_svg_version.svg" { width:auto; max-width:40% }

#OpenCV
* core - a compact module defining basic data structures, including the dense multi-dimensional array Mat and basic functions used by all other modules.
* imgproc - an image processing module that includes linear and non-linear image filtering, geometrical image transformations (resize, affine and perspective warping, generic table-based remapping), color space conversion, histograms, and so on.
* video - a video analysis module that includes motion estimation, background subtraction, and object tracking algorithms.
*calib3d - basic multiple-view geometry algorithms, single and stereo camera calibration, object pose estimation, stereo correspondence algorithms, and elements of 3D reconstruction.
* features2d - salient feature detectors, descriptors, and descriptor matchers.
* objdetect - detection of objects and instances of the predefined classes (for example, faces, eyes, mugs, people, cars, and so on).
* highgui - an easy-to-use interface to video capturing, image and video codecs, as well as simple UI capabilities.
* gpu - GPU-accelerated algorithms from different OpenCV modules.
*  some other helper modules, such as FLANN and Google test wrappers, Python bindings, and others.

#Python?

~ Center
![python]
~

[python]: images/python.png "python" { width:auto; max-width:90% }

#Python w ROS

Python jest jednym z dwóch głównych języków ROS. 

#Python w OpenCV

Bindingi dla Pythona



#Demo 1
Dwa nody wymieniają dane w modelu publisher/subscriber.

#Demo 2
Aplikacja non-ROS wymienia dane z nodem ROS.

#Demo 2

Obraz z kamery publikowany jako nod jest przetwarzany w aplikacji korzystającej z OpenCV.

# Q&A

#Dziękuję za uwagę :-)

kontakt: marek.gawryszewski@outlook.com

