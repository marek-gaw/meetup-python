[INCLUDE=presentation]
Title         : Python i roboty(ka)
Sub Title     : 
Author        : Marek Gawryszewski
Affiliation   : 
Email         : marek.gawryszewski@outlook.com
Reveal Theme  : simple
Beamer Theme  : singapore

[TITLE]

#O mnie

- programista w Harman 
- doktorant w Instytucie Automatyki PŁ

~ Columns
~~ Column { width:"50%" }
![Harman]
~~
~~ Column { width:"50%" }
![hrp1v0bb] 
~~
~

[Harman]: images/Harman.jpg "Harman" { width:auto; max-width:70% }
[hrp1v0bb]: images/hrp1v0bb.jpeg "hrp1v0bb" { width:auto; max-width:70% }

#O czym opowiem?

* Jak zbudować robota?
* Gdzie w tym jest miejsce dla Pythona?

#Jak zbudować robota?

~ Center
Dwa zasadnicze elementy: sprzęt i oprogramowanie.
~

#Hardware

* Chasis
* Czujniki
* napęd (elementy wykonawcze)
* elektronika

#Software

* W zależności od platformy sprzętowej
  * bare metal
  * RTOS (FreeRTOS, ...)
  * Linux
* narzędzia, drivery, aplikacje
  * protokoły komunikacyjne (SPI, I2C, UART) , urządzenia (kamery, czujniki)
  * aplikacja sterująca

# Aplikacja

* obsługa sprzętu
* sterowanie
* logika

# Robotycy cierpią na wymyślanie koła od nowa

Typowe zadania, realizowane w większyości (każdym?) projekcie:

* komunikacja między modułami aplikacji
* obsługa sprzętu
* logowanie i debugowanie
* tworzenie mapy
* typowe algorytmy sterowania
* wewnętrzna komunikacja (protokół)
* obsługa kontrolerów (joystick, klawiatura)
* nawigacja

# Rozwiązanie?


# Biblioteki 

~ Align-Left
* ROS
~

Zestaw bibliotek i narzędzi pomagających tworzyć oprogramowanie dla robotów. 

~ Align-Left
* OpenCV
~
  Biblioteka algorytmów do analizy obrazu.
~ Align-Left
* OpenNI
  sterowanie przez naturalne interakcje.
~

~ Align-Left
* VISP

  Visual servoing, śledzenie.
~
~ Align-Left
* OPML

  planowanie ruchu  
~
~ Align-Left
* i wiele innych...
~


# ROS

![rosLarge]
~ Center
* 
* {.fragment} [ROS] is an open-source, meta-operating system for your robot. It provides the services you would expect from an operating system, including hardware abstraction, low-level device control, implementation of commonly-used functionality, message-passing between processes, and package management. It also provides tools and libraries for obtaining, building, writing, and running code across multiple computers. _(wiki.ros.org)_
*
~

[rosLarge]: images/rosLarge.png "rosLarge" { width:auto; max-width:30% }
[ROS]: http://www.ros.org

#ROS

ROS oferuje standardowe funkcje, dostępne w systemie operacyjnym:

* abstrakcja sprzętu
* IPC
* narzędzia i biblioteki do zarządzania i budowania aplikacji


#ROS - pojęcia podstawowe
* **node**
* **topic**
* **package **
* **message**
* **service**

#ROS - komunikacja w ROS

  
~ Center
![ROS_basic_concepts]
~


[ROS_basic_concepts]: images/ROS_basic_concepts.png "ROS_basic_concepts" { width:100%; max-width:300% }


#OpenCV
~ Center
 ![OpenCV_Logo.svg]
~
* {.fragment}
* {.fragment} (Open Source Computer Vision Library: http://opencv.org) is an open-source BSD-licensed library that includes several hundreds of computer vision algorithms._ (docs.opencv.org)_

[OpenCV_Logo.svg]: images/2000px-OpenCV_Logo_with_text_svg_version.svg.png "2000px-OpenCV_Logo_with_text_svg_version.svg" { width:30%; max-width:40% }

#OpenCV - funkcjonalności

* przetwarzanie obrazów (filtrowanie, przekształcenia geometryczne, zmiany kolorów, histogramy, etc.)
* przetwarzanie strumieni wideo (wykrywanie ruchu, ekstrakcja tła, śledzenie)
* kalibralbracja kamer
* wykrywanie cech obrazu
* obsługa GPU

#Python?

~ Center
![python]
~

[python]: images/python.png "python" { width:auto; max-width:90% }

#Python i ROS

~ Center
Jeden z dwóch głównych języków ROS (obok C++)
~


#Python iw OpenCV
~ Center
Bindingi dla Pythona 
~

#Inne zastosowania? (moje przykłady)

* skrypty symulacji
* narzędzia testowe


#Demo 1
Dwa nody wymieniają dane w modelu publisher/subscriber.

#Demo 2

Aplikacja zewnętrzna wymienia dane z nodami ROS.

#Demo 3

Obraz z kamery publikowany jako nod jest przetwarzany w aplikacji korzystającej z OpenCV.

# Q&A

#Dziękuję za uwagę :-)

kontakt: marek.gawryszewski@outlook.com

